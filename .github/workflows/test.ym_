name: Test

on:
  push:
    branches:
    - develop
  pull_request:
    branches:
    - develop
  workflow_run:
    workflows: [ci]
    types:
      - completed

env:
  HASH_SEEDS: pdm.lock docker/bin/* docker/conf/* docker/Dockerfile
  DOCKER_CACHE_IMAGE: ${{ vars.DOCKERHUB_ORGANIZATION }}/hope-support-images
  BUILD_DATE: $(date +"%Y-%m-%d %H:%M")
  DOCKER_DEFAULT_PLATFORM: linux/amd64

jobs:
    test:
      runs-on: ubuntu-20.04
      container:
        image: ${DOCKER_CACHE_IMAGE}:hde-dev-latest
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        ports:
          - 8000:8000
      services:
        redis:
          image: redis
        db:
          image: postgres:14
          env:
            POSTGRES_DATABASE: dedupe
            POSTGRES_PASSWORD: postgres
            POSTGRES_USERNAME: postgres
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/dedupe
        SECRET_KEY: secret_key
        CACHE_URL: redis://redis:6379/0
        CELERY_BROKER_URL: redis://redis:6379/0
        PYTHONPATH: /hde/code/src
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: DockerHub login
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Pull
          run: docker pull ${DOCKER_CACHE_IMAGE}:hde-dev-latest
        - name: Run tests
          run: |
                docker run --rm \
                -e PYTHONPATH=/hde/code/src:/hde/__pypackages__/3.12/lib \
                -e CACHE_URL="${CACHE_URL}" \
                -e DATABASE_URL="${DATABASE_URL}" \
                -e SECRET_KEY="${SECRET_KEY}" \
                -e CELERY_BROKER_URL="${CELERY_BROKER_URL}" \
                -v ${PWD}:/hde/code/ \
                -w /hde/code/ \
                -t ${DOCKER_CACHE_IMAGE}:hde-dev-latest \
                pytest tests/ --create-db -v --cov --cov-report xml:coverage.xml

        - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v4
          with:
            directory: ./coverage/reports/
            env_vars: OS,PYTHON
            fail_ci_if_error: true
            files: /hde/code/coverage1.xml
            flags: unittests
            name: codecov-umbrella
            token: ${{ secrets.CODECOV_TOKEN }}
            verbose: true